// @tiptap/extension-horizontal-rule@2.11.7 downloaded from https://ga.jspm.io/npm:@tiptap/extension-horizontal-rule@2.11.7/dist/index.js

import{Node as t,nodeInputRule as e,isNodeSelection as o,mergeAttributes as n}from"@tiptap/core";import{TextSelection as r,NodeSelection as s}from"@tiptap/pm/state";const i=t.create({name:"horizontalRule",addOptions(){return{HTMLAttributes:{}}},group:"block",parseHTML(){return[{tag:"hr"}]},renderHTML({HTMLAttributes:t}){return["hr",n(this.options.HTMLAttributes,t)]},addCommands(){return{setHorizontalRule:()=>({chain:t,state:e})=>{const{selection:n}=e;const{$from:i,$to:a}=n;const c=t();i.parentOffset===0?c.insertContentAt({from:Math.max(i.pos-1,0),to:a.pos},{type:this.name}):o(n)?c.insertContentAt(a.pos,{type:this.name}):c.insertContent({type:this.name});return c.command((({tr:t,dispatch:e})=>{var o;if(e){const{$to:e}=t.selection;const n=e.end();if(e.nodeAfter)e.nodeAfter.isTextblock?t.setSelection(r.create(t.doc,e.pos+1)):e.nodeAfter.isBlock?t.setSelection(s.create(t.doc,e.pos)):t.setSelection(r.create(t.doc,e.pos));else{const s=(o=e.parent.type.contentMatch.defaultType)===null||o===void 0?void 0:o.create();if(s){t.insert(n,s);t.setSelection(r.create(t.doc,n+1))}}t.scrollIntoView()}return true})).run()}}},addInputRules(){return[e({find:/^(?:---|â€”-|___\s|\*\*\*\s)$/,type:this.type})]}});export{i as HorizontalRule,i as default};

